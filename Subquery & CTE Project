/* Welcome to my Subquery & CTEs project. While completing practice questions on various datasets, I authored 
a question that utilized a CTE or Common Table Expression to answer it. When answering, I contemplated when it
is best to use a subquery, a CTE, a JOIN, or even a simple SELECT statement. That is the provocation that sparked this project! 
I will be sharing some of the logic behind my choices to answer queries with a subquery vs. a CTE and so on. */   

-- Telecommunications Company Database
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT,
    product_type TEXT,
    speed_mbps INTEGER,
    data_limit_gb INTEGER,
    monthly_price DECIMAL(8, 2
);
CREATE TABLE customer_subscriptions (
    customer_id TEXT PRIMARY KEY,
    product_id INTEGER,
    price DECIMAL(8, 2),
    email TEXT,
    FOREIGN KEY (product_id) REFERENCES products (product_id)
);

-- Prep queries
SELECT * 
FROM products
LIMIT 5
;
SELECT *
FROM customer_subscriptions
LIMIT 5
;
/* In the two queries above, I am selecting all products and customer_subscription table data to note the different columns. 
products comlum names: product_id	product_name	product_type	speed_mbps	data_limit_gb	monthly_price. customer_subscriptions 
column names: customer_id	product_id	price	email */

SELECT DISTINCT product_type
FROM products 
;
-- Using the query above, I am selecting all the internet product types so I know the different options. 
product_types: Internet, Cell Phone Service, TV Package


-- Write a query that will select the customer IDs for all the customers who are subscribed to High-Speed Internet.

/* You can answer this request with a simple query if one knows the product_id for High-Speed Internet, however, in a 
large dataset over multiple tables, it is easier to pull the product_id within the query so one does not have to search 
for the correct product_id before hand. We can do this with a JOIN to combine the two tables and query to find the correct 
customer_ids, but that's not efficient either due to extra strings of code needed to establish the JOIN. The most efficient 
way to answer this request is to use a subquery displayed below. */

SELECT customer_id
FROM customer_subscriptions
WHERE product_id IN (
	 SELECT product_id 
     FROM products
     WHERE product_name = 'High-Speed Internet'
 );

-- Write a query that will select the email addresses of all the customers who are subscribed to products with the "Internet" product type. 

/* This request statement is similar to the one above in that it would be most efficient to use a subquery due to there 
not being a product_id correlated to the product_type. Also, if I were pulling from more than two tables, then I'd have to 
use a JOIN but in this case, it is easiest to use a subquery displayed below.*/

SELECT email
FROM customer_subscriptions
WHERE product_id IN (
	 SELECT product_id 
     FROM products
     WHERE product_type = 'Internet'
);



-- Superstore database
CREATE TABLE superstore (
    item_id INTEGER PRIMARY KEY,
    item_name TEXT,
    category TEXT,
    price DECIMAL(10, 2),
    stock_quantity INTEGER,
    average_rating DECIMAL(3, 2)
);

-- Show item with the highest rating for each category.

/* Below, I ansered this query using a CTE.  **EXPLANATION HERE** */

WITH ranked_items AS 
 (SELECT category, item_name, average_rating, 
     ROW_NUMBER() OVER(PARTITION BY category ORDER BY average_rating DESC) AS rn
     FROM superstore)
     
SELECT category, item_name, average_rating FROM ranked_items WHERE rn = 1
ORDER BY category, rn;
