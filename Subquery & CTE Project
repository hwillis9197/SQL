/* Welcome to my Subquery & CTEs project. While completing practice questions on various datasets, I authored 
a question that utilized a CTE or Common Table Expression to answer it. When answering, I contemplated when it
is best to use a subquery, a CTE, or even a simple SELECT statement. That is the provocation that sparked this project! 
I will be sharing some of the logic behind my choices to answer queries with a subquery vs. a CTE and so on. */   

-- Telecommunications Company Database
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT,
    product_type TEXT,
    speed_mbps INTEGER,
    data_limit_gb INTEGER,
    monthly_price DECIMAL(8, 2
);
CREATE TABLE customer_subscriptions (
    customer_id TEXT PRIMARY KEY,
    product_id INTEGER,
    price DECIMAL(8, 2),
    email TEXT,
    FOREIGN KEY (product_id) REFERENCES products (product_id)
);

-- Prep queries
SELECT * 
FROM products
LIMIT 5
;
SELECT *
FROM customer_subscriptions
LIMIT 5
;
/* In the two queries above, all data in the products and customer_subscriptions tables were selected to note the different columns. */

SELECT DISTINCT product_type
FROM products 
;
-- Using the query above, all internet product types were selected to note the different categories. 


-- Query Prompt/Question: Write a query that will select the customer IDs for all the customers who are subscribed to High-Speed Internet.

/* This request for all customer IDs subscribed to high-speed internet can be completed with a simple query if the 
product_id for High-Speed Internet is known, however, in a large dataset over multiple tables, it is more efficient 
to pull the identifier within the query so it does not need to be determined beforehand. The most efficient way to 
answer this request is to use a subquery written below. */

SELECT customer_id
FROM customer_subscriptions
WHERE product_id IN (
	 SELECT product_id 
     FROM products
     WHERE product_name = 'High-Speed Internet'
 );

-- Query Prompt/Question: Write a query that will select the email addresses of all the customers who are subscribed to products 
with the "Internet" product type. 

/* Explanation: This request for emails is similar to the last query in that it also benefits from utilizing a subquery for 
efficiency. Given the absence of a direct product_ids correlated to the product_type in the customer_subscriptions table, a 
subquery allows us to retrieve the relevant product_ids for "Internet" products without prior knowledge of their identifiers. 
The subquery method not only enhances clarity of the code but also reduces the risk of errors that could come from manually 
identifying product_ids, especially in larger datasets. */

SELECT email
FROM customer_subscriptions
WHERE product_id IN (
	 SELECT product_id 
     FROM products
     WHERE product_type = 'Internet'
);



-- Superstore database
CREATE TABLE superstore (
    item_id INTEGER PRIMARY KEY,
    item_name TEXT,
    category TEXT,
    price DECIMAL(10, 2),
    stock_quantity INTEGER,
    average_rating DECIMAL(3, 2)
);

-- Query Prompt/Question: Show item with the highest rating for each category within the superstore database.

/* The prompt is deceptively simple, however, requires supplementary filtering. The CTE, ranked_items, allows for 
efficient partitioning of data by category, applying the ROW_NUMBER() function to rank items based on their average 
rating. This approach simplifies the query structure and enhances readability, making it easier to manage complex logic, 
especially when dealing with multiple aggregations or rankings. */

WITH ranked_items AS 
 (SELECT category, item_name, average_rating, 
     ROW_NUMBER() OVER(PARTITION BY category ORDER BY average_rating DESC) AS rn
     FROM superstore)
     
SELECT category, item_name, average_rating FROM ranked_items WHERE rn = 1
ORDER BY category, rn;
